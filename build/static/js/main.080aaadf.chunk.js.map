{"version":3,"sources":["Components/Modal/Modal.module.css","Components/CrudView/CrudView.module.css","Components/App/App.module.css","Components/Main/Main.module.css","Store/actions.js","Store/reducers.js","Store/store.js","Components/Main/Main.jsx","Components/Modal/Modal.jsx","Components/CrudView/CrudView.jsx","Components/App/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Modal","modal","modalItem","google-places-suggestions-container","layout","CrudView","Add","App","active","Main","INIT","ADD","UPDATE","REMOVE","initialState","categoryLastID","category","id","name","categories","locationLastID","location","address","coordinates","locations","myStorage","window","localStorage","mainReducer","newData","index","toLocalStorage","state","arguments","length","undefined","action","type","stateFromStorage","JSON","parse","getItem","console","log","Object","objectSpread","payload","dataStruct","toConsumableArray","push","dataToHandle","stringify","setItem","map","item","indexOf","splice","cleanUncategorizedLocations","filter","createStore","combineReducers","composeWithDevTools","applyMiddleware","logger","thunk","connect","props","_useState","useState","_useState2","slicedToArray","locationsToRender","setlocationsToRender","_useState3","_useState4","placeId","setPlaceId","categorySelected","locationselected","useEffect","oncategorySelected","filtered","value","split","join","react_default","a","createElement","className","style","ref","onChange","defaultValue","key","title","width","height","frameBorder","src","concat","allowFullScreen","dispatch","add","update","remove","inputs","valid","setValid","fields","entries","data","entry","disabled","actionType","dataLastID","dist_default","GooglePlacesAutocomplete","initialValue","onSelect","onSelectAdress","description","required","onClick","setModal","nonStateValid","reduce","obj","currentEntry","document","querySelector","handleClick","setActionType","_useState5","_useState6","setData","keys","Components_Modal_Modal","init","routes","path","exact","component","Components_Main_Main","Components_CrudView_CrudView","react_router_dom","listStyleType","padding","to","route","react_router","Boolean","hostname","match","ReactDOM","render","es","store","ReduxStore","Components_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.080aaadf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__2Ywj6\",\"modal\":\"Modal_modal__1XFob\",\"modalItem\":\"Modal_modalItem__2DwRi\",\"google-places-suggestions-container\":\"Modal_google-places-suggestions-container__35EXp\",\"layout\":\"Modal_layout__1h3sN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CrudView\":\"CrudView_CrudView__37s-_\",\"Add\":\"CrudView_Add__2QcmB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__S0FAI\",\"active\":\"App_active__3aTT8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__2Tqjz\"};","\r\n/*\r\n * action types\r\n */\r\n\r\nexport const INIT = 'INIT'\r\nexport const ADD = 'ADD'\r\nexport const UPDATE = 'UPDATE'\r\nexport const REMOVE = 'REMOVE'\r\n\r\n/*\r\n * action creators\r\n */\r\n\r\nexport function init(payload) {\r\n    return { type: INIT, payload }\r\n};\r\n\r\nexport function add(payload) {\r\n    return { type: ADD, payload }\r\n};\r\n\r\nexport function update(payload) {\r\n    return { type: UPDATE, payload }\r\n};\r\n\r\nexport function remove(payload) {\r\n    return { type: REMOVE, payload }\r\n};\r\n\r\n","\r\nimport {\r\n    ADD,\r\n    UPDATE,\r\n    REMOVE,\r\n    INIT,\r\n} from './actions'\r\n\r\nconst initialState = {\r\n    categoryLastID: 0,\r\n    category: {\r\n        id: 0,\r\n        name: \"\"\r\n    },\r\n    categories: [],\r\n    locationLastID: 0,\r\n    location: {\r\n        id: 0,\r\n        name: \"\",\r\n        address: \"\",\r\n        coordinates: \"\",\r\n        category: \"\",\r\n    },\r\n    locations: [],\r\n};\r\n\r\nconst myStorage = window.localStorage;\r\n\r\nfunction mainReducer(state = initialState, action) {\r\n    let newData;\r\n    let index;\r\n    let toLocalStorage;\r\n    switch (action.type) {\r\n        case INIT:\r\n            const stateFromStorage = JSON.parse(myStorage.getItem(\"state\"));\r\n            console.log(\"INIT\");\r\n            \r\n            return { ...state, ...stateFromStorage };\r\n        case ADD:\r\n            if (action.payload.dataStruct === state.location) {\r\n                newData = [...state.locations];\r\n                newData.push(action.payload.dataToHandle);\r\n                toLocalStorage = JSON.stringify({ ...state, locations: newData, locationLastID: state.locationLastID + 1 })\r\n                myStorage.setItem(\"state\", toLocalStorage);\r\n                return { ...state, locations: newData, locationLastID: ++state.locationLastID };\r\n            } else {\r\n                newData = [...state.categories];\r\n                newData.push(action.payload.dataToHandle);\r\n                toLocalStorage = JSON.stringify({ ...state, categories: newData, categoryLastID: state.categoryLastID + 1 })\r\n                myStorage.setItem(\"state\", toLocalStorage);\r\n                return { ...state, categories: newData, categoryLastID: ++state.categoryLastID };\r\n            }\r\n        case UPDATE:\r\n            if (action.payload.dataStruct === state.location) {\r\n                newData = [...state.locations];\r\n                index = newData.map(item => item.id).indexOf(action.payload.dataToHandle.id);\r\n                newData[index] = action.payload.dataToHandle;\r\n                toLocalStorage = JSON.stringify({ ...state, locations: newData})\r\n                myStorage.setItem(\"state\", toLocalStorage);\r\n                return { ...state, locations: newData };\r\n            } else {\r\n                newData = [...state.categories];\r\n                index = newData.map(item => item.id).indexOf(action.payload.dataToHandle.id);\r\n                newData[index] = action.payload.dataToHandle;\r\n                toLocalStorage = JSON.stringify({ ...state, categories: newData})\r\n                myStorage.setItem(\"state\", toLocalStorage);\r\n                return { ...state, categories: newData };\r\n            }\r\n        case REMOVE:\r\n            if (action.payload.dataStruct === state.location) {\r\n                newData = [...state.locations];\r\n                index = newData.map(item => item.id).indexOf(action.payload.id);\r\n                newData.splice(index, 1);\r\n                toLocalStorage = JSON.stringify({ ...state, locations: newData});\r\n                myStorage.setItem(\"state\", toLocalStorage);\r\n                return { ...state, locations: newData };\r\n            } else {\r\n                newData = [...state.categories];\r\n                index = newData.map(item => item.id).indexOf(action.payload.id);\r\n                newData.splice(index, 1);\r\n                toLocalStorage = JSON.stringify({ ...state, categories: newData});\r\n                myStorage.setItem(\"state\", toLocalStorage);\r\n\r\n                let cleanUncategorizedLocations = [...state.locations];\r\n                cleanUncategorizedLocations = cleanUncategorizedLocations.filter((location) => \r\n                    location.category !== action.payload.id\r\n                )\r\n                return { ...state, categories: newData , locations : cleanUncategorizedLocations};\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default mainReducer","import { createStore , combineReducers , applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport mainReducer from './reducers'\r\nimport thunk from 'redux-thunk'\r\nimport logger from 'redux-logger'\r\n\r\nexport default createStore(\r\n    combineReducers({\r\n        mainReducer\r\n    }),\r\n    {},\r\n    composeWithDevTools(applyMiddleware( logger, thunk))\r\n)","import React, { useState, useEffect } from 'react';\r\nimport style from './Main.module.css'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Main = (props) => {\r\n\r\n    const [locationsToRender, setlocationsToRender] = useState([]);\r\n    const [placeId, setPlaceId] = useState(null);\r\n    let categorySelected = null;\r\n    let locationselected = null;\r\n    let apikey = \"AIzaSyAw7dBz3fBk-f9SwRFaFqvPln6e20Tnu9Q\";\r\n\r\n    useEffect(() => {\r\n        oncategorySelected();\r\n    }, [props.categories])\r\n\r\n    const oncategorySelected = () => {\r\n        const filtered = props.locations.filter(\r\n            location => location.category === categorySelected.value\r\n        )\r\n\r\n        setlocationsToRender(filtered);\r\n\r\n        if (filtered.length > 0) {\r\n            let address = filtered[0].address.split(' ').join('+');\r\n            setPlaceId(address);\r\n        } else {\r\n            setPlaceId(null);\r\n        }\r\n    }\r\n\r\n    const onlocationselected = () => {\r\n        console.log(JSON.parse(locationselected.value));\r\n\r\n        setPlaceId(JSON.parse(locationselected.value).address.split(' ').join('+'));\r\n    }\r\n\r\n    return (\r\n        <div className={style.Main}>\r\n\r\n            <h3>categories</h3>\r\n            <select\r\n                ref={(ref) => categorySelected = ref}\r\n                onChange={() => { oncategorySelected(); }}\r\n                defaultValue={props.categories.length > 0 ? props.categories[0].name : \"none\"}\r\n            >\r\n                {props.categories.length > 0 && props.categories !== undefined ?\r\n                    (props.categories.map((category) => {\r\n                        return <option value={category.id} key={category.id}>\r\n                            {category.name}\r\n                        </option>\r\n                    })) : <option value=\"none\">No categories Found</option>}\r\n            </select>\r\n            <h3>locations</h3>\r\n            <select\r\n                ref={(ref) => locationselected = ref}\r\n                onChange={() => { onlocationselected(); }}>\r\n                {locationsToRender.length > 0 ?\r\n                    (locationsToRender.map((location) => {\r\n                        return <option value={JSON.stringify(location)} key={location.id}>\r\n                            {location.name}\r\n                        </option>\r\n                    })) : <option value=\"none\">No locations Found</option>}\r\n            </select>\r\n            {console.log(placeId)\r\n            }\r\n            {placeId !== null ? <iframe title=\"maps\" width=\"600\" height=\"450\" frameBorder=\"0\"\r\n                src={`https://www.google.com/maps/embed/v1/place?q=${placeId}&key=${apikey}`}\r\n                allowFullScreen></iframe>\r\n                : null}\r\n        </div >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    categories: state.mainReducer.categories,\r\n    locations: state.mainReducer.locations,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n)(Main);","import React, { useState, useEffect } from 'react';\r\nimport style from './Modal.module.css'\r\nimport { connect } from 'react-redux'\r\nimport { add, update, remove } from '../../Store/actions'\r\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\r\nconst Modal = (props) => {\r\n\r\n    let inputs = {};\r\n\r\n    const [valid, setValid] = useState(true);\r\n\r\n    const handleClick = () => {\r\n        let payload = []\r\n        let dataToHandle = {};\r\n        let nonStateValid = true;\r\n\r\n        if (props.actionType === \"remove\") {\r\n            payload = { dataStruct: props.dataStruct, id: props.data.id };\r\n            props.remove(payload);\r\n        } else {\r\n            payload = {\r\n                dataStruct: props.dataStruct,\r\n                dataToHandle: Object.entries(inputs).reduce((obj, currentEntry) => {\r\n                    if (currentEntry[0] === \"address\" && currentEntry[1].value === undefined)\r\n                        currentEntry[1].value = document.querySelector(\"#google-places-autocomplete-input\").value;\r\n\r\n                    if (!currentEntry[1].value || currentEntry[1].value === \"none\")\r\n                        nonStateValid = false;\r\n\r\n                    obj[currentEntry[0]] = currentEntry[1].value;\r\n                    return obj;\r\n                }, dataToHandle)\r\n            }\r\n\r\n            setValid(nonStateValid);\r\n\r\n            if (nonStateValid) {\r\n                if (props.actionType === \"add\")\r\n                    props.add(payload);\r\n                else\r\n                    props.update(payload);\r\n            }\r\n        }\r\n    }\r\n\r\n    const fields = Object.entries(props.data).map((entry, index) => {\r\n        let entryElement = < div className={style.modalItem} key={entry[0]} >\r\n            <label>{entry[0]}</label>\r\n\r\n            {\r\n                entry[0] === \"category\" ?\r\n\r\n                    <select\r\n                        ref={(ref) => inputs[entry[0]] = ref}\r\n                        disabled={\r\n                            (props.actionType === \"remove\") ? true : false\r\n                        }\r\n                        defaultValue={\r\n                            (props.actionType === \"add\") ?\r\n                                (entry[0] === \"id\" ? props.dataLastID : \"\") : entry[1]\r\n                        }>\r\n                        {props.categories.length > 0 && props.categories !== undefined ?\r\n                            (props.categories.map((category) => {\r\n                                return <option value={category.id}\r\n                                    key={category.id}>\r\n                                    {category.name}\r\n                                </option>\r\n                            })) : <option value=\"none\">No categories Found</option>}\r\n                    </select>\r\n                    :\r\n                    entry[0] === \"address\" && props.actionType !== \"remove\" ?\r\n                        < GooglePlacesAutocomplete\r\n                            className={style.GooglePlacesAutocomplete}\r\n                            ref={(ref) => { inputs[entry[0]] = ref }}\r\n                            initialValue={entry[1]}\r\n                            onSelect={onSelectAdress => {\r\n                                inputs[entry[0]].value = onSelectAdress.description;\r\n                            }}\r\n                        >\r\n                        </GooglePlacesAutocomplete>\r\n                        :\r\n                        <input\r\n                            type=\"text\"\r\n                            required\r\n                            ref={(ref) => inputs[entry[0]] = ref}\r\n                            disabled={\r\n                                (entry[0] === \"id\" ||\r\n                                    props.actionType === \"remove\") ? true : false\r\n                            }\r\n                            defaultValue={\r\n                                (props.actionType === \"add\") ?\r\n                                    (entry[0] === \"id\" ? props.dataLastID : \"\") : entry[1]\r\n                            }\r\n                        ></input>\r\n\r\n            }\r\n        </div >\r\n\r\n        return entryElement;\r\n    })\r\n\r\n\r\n    return (\r\n        <div className={style.Modal}>\r\n            <div className={style.layout} onClick={() => { props.setModal(false) }}></div>\r\n            <div className={style.modal}>\r\n                {fields}\r\n                {\r\n                    (props.actionType === \"remove\") ?\r\n                        <h3>Are you sure you want to delete {props.data.name}?</h3>\r\n                        : null\r\n                }\r\n                {\r\n                    (valid === false) ?\r\n                        <h3>All fields are mendatory</h3>\r\n                        : <div></div>\r\n                }\r\n                <div className=\"\">\r\n                    <button onClick={() => { handleClick() }}>{props.actionType}</button>\r\n                    <button onClick={() => { props.setModal(false) }}>cancel</button>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    categories: state.mainReducer.categories,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        add: (payload) => dispatch(add(payload)),\r\n        update: (payload) => dispatch(update(payload)),\r\n        remove: (payload) => dispatch(remove(payload)),\r\n    }\r\n};\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Modal);","import React, { useState } from 'react';\r\nimport style from './CrudView.module.css'\r\nimport { connect } from 'react-redux'\r\nimport Modal from '../Modal/Modal'\r\n\r\nconst CrudView = (props) => {\r\n\r\n    const [modal, setModal] = useState(false);\r\n    const [actionType, setActionType] = useState(\"add\");\r\n    const [data, setData] = useState(props.dataStruct);\r\n\r\n    return (\r\n        <div className={style.CrudView}>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        {Object.keys(props.dataStruct).map((key) =>\r\n                            <th key={key}>{key}</th>\r\n                        )}\r\n                        <th>Update</th>\r\n                        <th>Delete</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {/* {   console.log(props.data)\r\n                    } */}\r\n                    {props.data.map((item) =>\r\n                        <tr key={item.id}>\r\n                            {Object.entries(item).map((value) =>\r\n                                <td key={value[0]}>\r\n                                    {\r\n                                        value[0] === \"category\" ?\r\n                                            props.categories.filter((category) => category.id === value[1])[0].name :\r\n                                            value[1]\r\n                                    }\r\n                                </td>\r\n                            )}\r\n                            <td>\r\n                                <button onClick={() => {\r\n                                    setModal(true);\r\n                                    setActionType(\"update\");\r\n                                    setData(item);\r\n                                }}>Update</button>\r\n                            </td>\r\n                            <td>\r\n                                <button onClick={() => {\r\n                                    setModal(true);\r\n                                    setActionType(\"remove\");\r\n                                    setData(item);\r\n                                }}>Delete</button>\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n            <button className={style.Add} onClick={() => {\r\n                setModal(true);\r\n                setActionType(\"add\");\r\n                setData(props.dataStruct);\r\n            }}>Add</button>\r\n            {modal ?\r\n                <Modal\r\n                    setModal={setModal}\r\n                    data={data}\r\n                    actionType={actionType}\r\n                    dataStruct={props.dataStruct}\r\n                    dataLastID={props.dataLastID}>\r\n                </Modal> : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    categories: state.mainReducer.categories,\r\n});\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n)(CrudView);","import React , {useEffect} from 'react'\r\nimport style from './App.module.css'\r\nimport Main from '../Main/Main.jsx'\r\nimport CrudView from '../CrudView/CrudView.jsx'\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'\r\nimport {init} from '../../Store/actions'\r\n\r\nconst App = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.init();\r\n    }, [])\r\n\r\n    const routes = [\r\n        {\r\n            path: \"/\",\r\n            exact: true,\r\n            component: () => <Main></Main>\r\n        },\r\n        {\r\n            path: \"/main\",\r\n            component: () => <Main></Main>\r\n        },\r\n        {\r\n            path: \"/categories\",\r\n            component: () => <CrudView\r\n                dataStruct={props.category}\r\n                data={props.categories}\r\n                dataLastID={props.categoryLastID}>\r\n                    \r\n            </CrudView>\r\n        },\r\n        {\r\n            path: \"/locations\",\r\n            component: () => <CrudView\r\n                dataStruct={props.location}\r\n                data={props.locations}\r\n                dataLastID={props.locationLastID}>\r\n            </CrudView>\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <div className={style.App}>\r\n            <Router>\r\n                <header>\r\n                    <ul style={{ listStyleType: \"none\", padding: 0 }}>\r\n                        <li>\r\n                            <Link to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/categories\">categories</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/locations\">locations</Link>\r\n                        </li>\r\n                    </ul>\r\n                </header>\r\n                {/* {   console.log(props.categories)\r\n                    } */}\r\n                {routes.map((route, index) => (\r\n                    <Route\r\n                        key={index}\r\n                        path={route.path}\r\n                        exact={route.exact}\r\n                        component={route.component}\r\n                    />\r\n                ))}\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    categories: state.mainReducer.categories,\r\n    locations: state.mainReducer.locations,\r\n    category: state.mainReducer.category,\r\n    location: state.mainReducer.location,\r\n    categoryLastID: state.mainReducer.categoryLastID,\r\n    locationLastID: state.mainReducer.locationLastID,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        init: (payload) => dispatch(init(payload)),\r\n    }\r\n};\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport ReduxStore from './Store/store'\r\nimport './index.css';\r\nimport App from './Components/App/App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={ReduxStore}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}